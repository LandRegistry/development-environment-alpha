#!/bin/bash

set -e
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
mkdir -p /vagrant/logs

apps_and_ports=`cat /vagrant/config/apps | grep -v \# | grep -v '^\s*$'`
DEV_ENV_REQUIREMENTS=/vagrant/config/virtual-env-global-requirements.txt

function get_port_for_app {
  local app=$1 

  if [[ $(is_valid_app $app) = 1 ]] ; then
    for app_and_port in ${apps_and_ports}; do
      local found_app_name=`echo ${app_and_port} | cut -d':' -f1`
      local found_app_port=`echo ${app_and_port} | cut -d':' -f2`

      if [[ ${app} = ${found_app_name} ]] ; then
        echo $found_app_port
      fi
    done
  fi
}

function all_apps {
  local apps

  for app_and_port in ${apps_and_ports}; do
    apps="`echo -n ${app_and_port} | cut -d':' -f1` ${apps}"
  done

  echo -n ${apps}
}

function is_valid_app {
  local app=$1
  local found_app_name

  for app_and_port in ${apps_and_ports}; do
    found_app_name=`echo ${app_and_port} | cut -d':' -f1`

    if [[ ${app} = ${found_app_name} ]] ; then
      echo 1
    fi
  done
}

function update_development_environment {
  echo "Updating development environment"
  git -C /vagrant pull 
  lr-bootstrap
}

function update_submodules_for_app {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [[ -f ${app_dir}/.gitmodules ]] ; then
      echo "Initialising git submodule for ${app}"
      git -C ${app_dir} submodule init
      git -C ${app_dir} submodule update
  fi
}

function checkout {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [[ ! -d ${app_dir} ]] ; then 
    mkdir -p /vagrant/apps/
    git -C /vagrant/apps/ clone git@github.com:landregistry/${app}.git
    update_submodules_for_app ${app}
  fi
}

function source_app_environment {
  local environment=/vagrant/apps/$1/environment.sh

  if [[ -f ${environment} ]]; then
    set +o errexit
    source ${environment}
    set -e
  fi
}

function source_app_test_environment {
  local environment=/vagrant/apps/$1/environment_test.sh

  if [[ -f ${environment} ]]; then
    set +o errexit
    source ${environment}
    set -e
  fi
}

function update_app {
  local app=$1
  local app_dir=/vagrant/apps/${app}

  if [ -d ${app_dir} ] ; then
    echo "Refreshing application ${app}"
    git -C ${app_dir} pull
    update_submodules_for_app ${app}
  fi
}

function create_virtual_env {
  local app_name=$1

  if [[ ! -d ${WORKON_HOME}/${app_name} ]] ; then
    echo "Creating python virtual env for ${app_name} in ${WORKON_HOME}"
    set +o errexit
    mkvirtualenv -a "/vagrant/apps/${app_name}" -r ${DEV_ENV_REQUIREMENTS} ${app_name}
    set -e
  fi
  
  echo "Activating virtual envrionment [${app_name}]"
  set +o errexit
  workon ${app_name}
  set -e
  pip -q install -r ${DEV_ENV_REQUIREMENTS}

  if [[ -f /vagrant/apps/${app_name}/requirements.txt ]] ; then
    pip -q install -r /vagrant/apps/${app_name}/requirements.txt
  fi 

  if [[ -f /vagrant/apps/${app_name}/requirements_test.txt ]] ; then
    pip -q install -r /vagrant/apps/${app_name}/requirements_test.txt
  fi 
}

function dump_apps_and_ports {
  local app

  for app in ${apps_and_ports}; do
    echo ${app}
  done
}

function check_all_apps_are_valid {
  for app_to_start in $@; do
    if [[ $(is_valid_app ${app_to_start}) != 1 ]] ; then
      echo
      echo "Can't find an app called [${app_to_start}] in the configuration file in /vagrant/config/apps"
      echo
      echo "The file currently contains:"
      echo
      dump_apps_and_ports
      echo
      exit 1
    fi
  done
}

function find_python_packages {
  echo `find  .  -type f -name __init__.py -print0 | xargs -0 -n1 dirname | grep -v tests | xargs basename`
}

function run_unit_tests_for_app {
  local app_to_test=$1

  check_all_apps_are_valid ${app_to_test}

  current_dir=`pwd`
  cd /vagrant/apps/${app_to_test}

  if [[ ! -d ./tests ]] ; then
    echo "No unit tests found for application ${app_to_test}"
  else
    echo "============================================================="
    echo            RUNNING TESTS FOR ${app_to_test}
    echo "-------------------------------------------------------------" 
    cd /vagrant/apps/${app_to_test}  
    check_all_apps_are_valid ${app_to_test}
    
    set +o errexit
    configure_virtual_env_for_apps ${app_to_test}    
    workon ${app_to_test}
    source_app_environment $app_to_test
    source_app_test_environment $app_to_test

    if [[ -z ${SETTINGS} ]] ; then
      export SETTINGS="config.TestConfig"
    fi

    PORT=$(get_port_for_app $1) py.test --cov $(find_python_packages) tests/
    deactivate
    set -e
  fi

  cd ${current_dir}
}

function die_if_procfile_is_present {
  if [[ -f /vagrant/Procfile ]]; then
    echo
    echo "You already have a Procfile in /vagrant/Procfile which is running the following apps"
    echo
    for proc_definition in `cat /vagrant/Procfile | cut -d':' -f1`; do
      echo ${proc_definition}
    done 
    echo
    echo "This either means that you already have some applications running" 
    echo "   OR"
    echo "the applications have died leaving a Procfile behind"
    echo
    echo "Either stop the apps or remove the Procfile"
    echo "DONT'T JUST REMOVE THE PROCFILE WITHOUT STOPPING THE APPS"
    echo
    exit 1
  fi
}

function remove_procfile_on_exit {
    rm -f /vagrant/Procfile
}

function die_cant_find_any_apps {
  echo 
  echo "You've called this script without specifiy which apps you need and I can't find a run.sh" 
  echo "in the current directory [`pwd`]" 
  echo 
  echo "You either need to specify some apps, or lr-run-app from the base directory of an app with a run.sh" 
  echo 
  exit 1
}

function configure_virtual_env_for_apps {
  for app_to_start in $@; do
    (
      create_virtual_env ${app_to_start}
      deactivate
    )
  done
}
